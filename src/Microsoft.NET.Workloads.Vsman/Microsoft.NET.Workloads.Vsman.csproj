<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE.md file in the project root for more information. -->
<Project Sdk="Microsoft.Build.NoTargets">

  <PropertyGroup>
    <TargetFramework>$(SdkTargetFramework)</TargetFramework>
  </PropertyGroup>

  <!-- This acquires the workloads, creates the VSMAN file for each, and readys the drop for upload. -->
  <Target Name="BuildVsmanProj" AfterTargets="Build" Condition="'$(CreateVSInsertion)' == 'true'">

    <PropertyGroup>
      <WorkloadDirectory>$(ArtifactsDir)workloads\</WorkloadDirectory>
      <WorkloadDropDirectory>$(WorkloadDirectory)drops\</WorkloadDropDirectory>
      <WorkloadCIArguments Condition="'$(WorkloadGitHubPat)' != '' AND '$(WorkloadAzDOPat)' != ''">-gitHubPat $(WorkloadGitHubPat) -azDOPat $(WorkloadAzDOPat)</WorkloadCIArguments>
    </PropertyGroup>

    <!-- Downloads the workloads using DARC based on the dependencies in Version.Details.xml. -->
    <Exec Command="powershell -NonInteractive -NoLogo -NoProfile -Command &quot;. $(RepositoryEngineeringDir)download-workloads.ps1 -workloadOutputPath $(WorkloadDirectory) $(WorkloadCIArguments)&quot;" />

    <!-- Gets the name of each drop folder and truncates them to only the workload name. -->
    <!-- <Exec ConsoleToMSBuild="true" Command="powershell -NonInteractive -NoLogo -NoProfile -Command &quot;Get-ChildItem -Path $(WorkloadDropDirectory) -Directory | ForEach-Object { $_.Name.Replace('Workload.VSDrop.', '') }&quot;">
      <Output TaskParameter="ConsoleOutput" ItemName="WorkloadName" />
    </Exec> -->

    <!-- <Exec ConsoleToMSBuild="true" Command="powershell -NonInteractive -NoLogo -NoProfile -Command &quot;. $(RepositoryEngineeringDir)get-workload-info.ps1 -workloadDropPath $(WorkloadDropDirectory)&quot;">
      <Output TaskParameter="ConsoleOutput" ItemName="WorkloadInfo" />
    </Exec> -->

    <Exec ConsoleToMSBuild="true" Command="powershell -NonInteractive -NoLogo -NoProfile -Command &quot;Get-ChildItem -Path $(WorkloadDropDirectory) -Directory | ForEach-Object { $null = $_.Name -match '^Workload\.VSDrop\.(?&lt;full&gt;(?&lt;short&gt;\w*)\..*?(?&lt;type&gt;(pre\.)?components$|packs$))'; $Matches.full + ';' + $Matches.short + ';' + $Matches.type.Replace('.', '') }&quot;">
      <Output TaskParameter="ConsoleOutput" ItemName="WorkloadInfo" />
    </Exec>

    <ItemGroup>
      <WorkloadInfo Update="@(WorkloadInfo)" Full="$([System.String]::Copy('%(Identity)').Split(';')[0])" Short="$([System.String]::Copy('%(Identity)').Split(';')[1])" Type="$([System.String]::Copy('%(Identity)').Split(';')[2])" />
    </ItemGroup>

    <!-- Builds the .vsmanproj per each workload drop. Directly calling MSBuild.exe is required as the /restore flag is necessary for it to build properly (and doesn't exist in the MSBuild task). -->
    <!--
      VstsDropNames: Sets the URL partial path for the VSDrop that is written into the VSMAN file.
      VsixOutputPath: Sets the output directory for the VSMAN file when the .vsmanproj is built.
      AssemblyName: Sets the name of the VSMAN file.
    -->
    <Exec Command='
set DropName=Products/dotnet/workloads/%(WorkloadInfo.Identity)/$([System.DateTime]::Now.ToString("yyyyMMdd.hhmmss.fff")) &amp;&amp; ^
set DropDir=$(WorkloadDropDirectory)Workload.VSDrop.%(WorkloadInfo.Identity)\ &amp;&amp; ^
"$(MSBuildToolsPath)\MSBuild.exe" Microsoft.NET.Workloads.Vsman.vsmanproj /restore /t:Build ^
  /p:VstsDropNames=%DropName% ^
  /p:VsixOutputPath=%DropDir% ^
  /p:AssemblyName=%(WorkloadInfo.Identity) &amp;&amp; ^
echo ##vso[task.setvariable variable=%(WorkloadInfo.Short)_%(WorkloadInfo.Type)_name]%DropName% &amp;&amp; ^
echo ##vso[task.setvariable variable=%(WorkloadInfo.Short)_%(WorkloadInfo.Type)_dir]%DropDir%
' />

    <!-- Clean up intermediate build files in the workload drop folders. -->
    <Exec Command="powershell -NonInteractive -NoLogo -NoProfile -Command &quot;Get-ChildItem -Path $(WorkloadDropDirectory) -Include *.json, *.vsmand, files.txt -Recurse | Remove-Item&quot;" />

  </Target>

</Project>