# Pipeline: https://dev.azure.com/dnceng/internal/_build?definitionId=1298

trigger: none
pr: none

parameters:
- name: StabilizePackageVersion
  displayName: Stabilize Package Version
  type: boolean
  default: false
- name: publishToFeed
  displayName: Publish to feed
  type: boolean
  default: false
- name: feedForPublishing
  displayName: Feed for publishing
  type: string
  default: public/dotnet9-workloads
- name: createVSInsertion
  displayName: Create VS insertion
  type: boolean
  default: false
- name: usePreComponentsForVSInsertion
  displayName: Use Preview Components for VS insertion
  type: boolean
  default: false
- name: workloadsForVSDrops
  displayName: Workloads for VS drops
  type: object
  default:
  - emsdk
  - mono
  - android
# These types match the types handled in create-workload-drops.ps1. There is a RegEx in that script that parses the workload type out of the workload path.
# If this list needs to be updated, the RegEx in the script also needs to be updated.
# The hardcoded list here is necessary as these types need to be available during compilation of the pipeline.
# The workload types become separate variables in the create-workload-drops.ps1 and this list is looped over to create multiple drop tasks.
- name: workloadTypesForVSDrops
  displayName: '[DO NOT EDIT] Workload types for VS drops'
  type: object
  default:
  - components
  - packs
  - precomponents
  - multitarget
# These insert (pre)components & packs/multitarget into VS.
- name: primaryVsInsertionBranches
  displayName: Primary VS insertion branches
  type: object
  default:
  - rel/d17.12
# These insert packs/multitarget only into VS [no (pre)components].
- name: secondaryVsInsertionBranches
  displayName: Secondary VS insertion branches (packs only)
  type: object
  default:
  - rel/d17.13

variables:
- template: /eng/common/templates-official/variables/pool-providers.yml@self
- ${{ if eq(variables['_RunAsPublic'], 'true') }}:
  - name: _AdditionalBuildArgs
    value: ''
  - name: _BuildJobDisplayName
    value: 'Build and Test'
- ${{ else }}:
  - name: _AdditionalBuildArgs
    value: '/p:Test=false'
  - name: _BuildJobDisplayName
    value: 'Build, Sign and Publish'
- name: _TeamName
  value: DotNet-Cli
- name: HelixApiAccessToken
  value: ''
- name: _RunAsPublic
  value: True
- name: _RunAsInternal
  value: False
- name: _InternalBuildArgs
  value: ''
- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
  - name: _RunAsPublic
    value: False
  - name: _RunAsInternal
    value: True
  - name: _SignType
    value: real
  # DotNet-Blob-Feed provides: dotnetfeed-storage-access-key-1
  # Publish-Build-Assets provides: MaestroAccessToken, BotAccount-dotnet-maestro-bot-PAT
  # DotNet-HelixApi-Access provides: HelixApiAccessToken
  - group: DotNet-Blob-Feed
  - group: Publish-Build-Assets
  - group: DotNet-HelixApi-Access
  - group: SDL_Settings
  - name: _InternalBuildArgs
    value: /p:DotNetSignType=$(_SignType)
      /p:TeamName=$(_TeamName)
      /p:DotNetPublishUsingPipelines=true
      /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
      /p:StabilizePackageVersion=${{ parameters.StabilizePackageVersion }}
  - name: PostBuildSign
    value: true
  # Release-Pipeline provides: MaestroAccessToken, BotAccount-dotnet-bot-repo-PAT, dn-bot-all-drop-rw-code-rw-release-all
  - group: Release-Pipeline
  # DotNet-DevDiv-Insertion-Workflow-Variables provides: dn-bot-devdiv-drop-rw-code-rw
  - group: DotNet-DevDiv-Insertion-Workflow-Variables
  # DotNet-VSTS-Infra-Access provides: dn-bot-devdiv-build-rw-code-rw-release-rw
  - group: DotNet-VSTS-Infra-Access

resources:
  repositories:
  - repository: 1esPipelines
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1esPipelines
  parameters:
    sdl:
      sourceAnalysisPool:
        name: $(DncEngInternalBuildPool)
        image: 1es-windows-2022
        os: windows
      policheck:
        enabled: true
      tsa:
        enabled: true
    stages:
    - stage: Build
      displayName: Build
      jobs:
      - template: /eng/common/templates-official/jobs/jobs.yml@self
        parameters:
          # artifacts:
          #   publish:
          #     artifacts: true
          #     logs: false
          #     manifests: true
          enableMicrobuild: true
          enablePublishBuildAssets: true
          enableTelemetry: true
          enablePublishUsingPipelines: true
          publishAssetsImmediately: true
          enableSbom: true
          jobs:
          - job: buildRepo
            displayName: Build Repo
            timeoutInMinutes: 120
            pool:
              name: $(DncEngInternalBuildPool)
              image: 1es-windows-2022
              os: windows
            steps:
            # - pwsh: >-
            #     $workloadGitHubPat = ConvertTo-SecureString -String "$(BotAccount-dotnet-bot-repo-PAT)" -AsPlainText -Force
            #     $workloadAzDOPat
            #     Write-Host "##vso[task.setvariable variable=WorkloadGitHubPat]$workloadGitHubPat"
            #     Write-Host "##vso[task.setvariable variable=WorkloadAzDOPat]$vsDropName"
            #   displayName: Set PAT variables

            - ${{ if eq(parameters.createVSInsertion, true) }}:
              - task: AzureCLI@2
                displayName: Download workloads for VS insertion
                inputs:
                  # TODO: Need our own subscription
                  azureSubscription: DotNetStaging
                  scriptType: pscore
                  scriptPath: $(Build.SourcesDirectory)/eng/download-workloads.ps1
                  arguments: >-
                    -workloadPath $(Build.SourcesDirectory)/artifacts/workloads
                    -gitHubPat (ConvertTo-SecureString -String "$(BotAccount-dotnet-bot-repo-PAT)" -AsPlainText -Force)
                    -azDOPat (ConvertTo-SecureString -String "$(dn-bot-all-drop-rw-code-rw-release-all)" -AsPlainText -Force)
                    -usePreComponents:$${{ parameters.usePreComponentsForVSInsertion }}

            # - task: AzureCLI@2
            #   displayName: Gather Workloads
            #   inputs:
            #     # TODO: Need our own subscription
            #     azureSubscription: DotNetStaging
            #     scriptType: pscore
            #     scriptPath: $(Build.SourcesDirectory)/eng/publish-workloads.ps1
            #     arguments: '-gitHubPat (ConvertTo-SecureString -String "$(BotAccount-dotnet-bot-repo-PAT)" -AsPlainText -Force) -azDevPat (ConvertTo-SecureString -String "$(dn-bot-all-drop-rw-code-rw-release-all)" -AsPlainText -Force) -password (ConvertTo-SecureString -String "$(MaestroAccessToken)" -AsPlainText -Force)'
            
            # - task: AzureCLI@2
            #   displayName: Build Solution
            #   inputs:
            #     # TODO: Need our own subscription
            #     azureSubscription: DotNetStaging
            #     scriptType: pscore
            #     scriptPath: $(Build.SourcesDirectory)/eng/common/build.ps1
            #     arguments: -restore -build -ci -msbuildEngine vs -configuration Release /p:CreateVSInsertion=${{ parameters.createVSInsertion }}

            # /p:WorkloadGitHubPat=$(BotAccount-dotnet-bot-repo-PAT)
            # /p:WorkloadAzDOPat=$(dn-bot-all-drop-rw-code-rw-release-all)

            # /p:WorkloadGitHubPat=(ConvertTo-SecureString -String "$(BotAccount-dotnet-bot-repo-PAT)" -AsPlainText -Force)
            # /p:WorkloadAzDOPat=(ConvertTo-SecureString -String "$(dn-bot-all-drop-rw-code-rw-release-all)" -AsPlainText -Force)

            - script: >-
                $(Build.SourcesDirectory)/build.cmd -ci -configuration Release
                /p:CreateVSInsertion=${{ parameters.createVSInsertion }}
                /p:WorkloadDirectory=$(Build.SourcesDirectory)/artifacts/workloads
              displayName: Build solution

            # - script: eng\common\CIBuild.cmd
            #     -configuration $(_BuildConfig)
            #     -prepareMachine
            #     $(_AdditionalBuildArgs)
            #     $(_InternalBuildArgs)
            #   displayName: $(_BuildJobDisplayName)
            - ${{ if eq(parameters.publishToFeed, true) }}:
              - task: 1ES.PublishNuget@1
                displayName: Publish NuGet package
                inputs:
                  useDotNetTask: true
                  packagesToPush: $(Build.SourcesDirectory)/artifacts/packages/**/*.nupkg
                  packageParentPath: $(Build.SourcesDirectory)/artifacts/packages
                  publishVstsFeed: ${{ parameters.feedForPublishing }}
                  nuGetFeedType: internal
                  allowPackageConflicts: false
                  publishPackageMetadata: true
            - ${{ if eq(parameters.createVSInsertion, true) }}:
              - ${{ each workloadShortName in parameters.workloadsForVSDrops }}:
                - ${{ each workloadType in parameters.workloadTypesForVSDrops }}:
                  # - pwsh: "Write-Host 'Workload: $(${{ workload }}_test)'"
                  #   displayName: Display ${{ workload }}

                  # # https://stackoverflow.com/a/60630739/294804
                  # - pwsh: Write-Host "##vso[task.setvariable variable=WorkloadDropExists]$(Test-Path -Path '$(${{ workloadShortName }}_${{ workloadType }}_dir)')"
                  #   displayName: Check if ${{ workloadShortName }}_${{ workloadType }} drop exists

                  # - pwsh: |
                  #     $accessToken = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes(":$(dn-bot-devdiv-drop-rw-code-rw)"))
                  #     $authHeader = @{ 'Authorization' = "Basic $accessToken" }
                  #     $workloadUrl = '$(${{ workloadShortName }}_${{ workloadType }}_url)'
                  #     try {
                  #       Invoke-RestMethod -Uri $workloadUrl -Method Get -ContentType 'application/json' -Headers $authHeader
                  #       Write-Host "##vso[task.setvariable variable=WorkloadUrlExists]True"
                  #     } catch {
                  #       Write-Host "##vso[task.setvariable variable=WorkloadUrlExists]False"
                  #     }
                  #   displayName: Check if ${{ workloadShortName }}_${{ workloadType }} URL exists

                  # - pwsh: |
                  #     $accessToken = ConvertTo-SecureString -String '$(dn-bot-devdiv-drop-rw-code-rw)' -AsPlainText -Force
                  #     $workloadUrl = '$(${{ workloadShortName }}_${{ workloadType }}_url)'
                  #     try {
                  #       $response = Invoke-WebRequest -Uri $workloadUrl -Authentication Bearer -Token $accessToken
                  #       Write-Host "##vso[task.setvariable variable=UploadWorkloadDrop]$($response.StatusCode -eq 200)"
                  #     } catch {
                  #       Write-Host "##vso[task.setvariable variable=UploadWorkloadDrop]False"
                  #     }
                  #   displayName: Check if ${{ workloadShortName }}_${{ workloadType }} URL exists

                  # https://stackoverflow.com/a/60630739/294804
                  # https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/azure-artifacts/drop-service/azure-artifacts-drop#dropexe-get-the-client-using-powershell-only-when-needed
                  - pwsh: |
                      # If the drop folder doesn't exist (not acquired), the drop cannot be uploaded.
                      if (-not (Test-Path -Path '$(${{ workloadShortName }}_${{ workloadType }}_dir)')) {
                        Write-Host "##vso[task.setvariable variable=UploadWorkloadDrop]False"
                        Write-Host 'Drop "${{ workloadShortName }}_${{ workloadType }}" was not acquired. Skipping upload.'
                        return
                      }
                      $accessToken = ConvertTo-SecureString -String '$(dn-bot-devdiv-build-rw-code-rw-release-rw)' -AsPlainText -Force
                      $workloadUrl = '$(${{ workloadShortName }}_${{ workloadType }}_url)'
                      $response = Invoke-WebRequest -Uri $workloadUrl -Authentication Bearer -Token $accessToken
                      if ($response.StatusCode -eq 401) {
                        Write-Host "##vso[task.setvariable variable=UploadWorkloadDrop]False"
                        Write-Host 'Workload drop check is unauthorized. Please fix.'
                        return 1
                      }
                      if ($response.StatusCode -ne 200) {
                        Write-Host "##vso[task.setvariable variable=UploadWorkloadDrop]False"
                        Write-Host 'Drop "${{ workloadShortName }}_${{ workloadType }}" has already been uploaded. Skipping upload.'
                        return
                      }
                      Write-Host "##vso[task.setvariable variable=UploadWorkloadDrop]True"
                    displayName: Check if ${{ workloadShortName }}_${{ workloadType }} exists
                    continueOnError: true

                  # Docs: https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/1es-pipeline-templates/features/outputs/microbuild-vsts-drop
                  # YAML reference (original task): https://dev.azure.com/devdiv/Engineering/_git/MicroBuild?path=/src/Tasks/UploadDrop/task.json
                  - task: 1ES.MicroBuildVstsDrop@1
                    displayName: 'Publish insertion drop: ${{ workloadShortName }}_${{ workloadType }}'
                    inputs:
                      dropFolder: $(${{ workloadShortName }}_${{ workloadType }}_dir)
                      dropName: $(${{ workloadShortName }}_${{ workloadType }}_name)
                      # See: https://dev.azure.com/devdiv/DevDiv/_wiki/wikis/DevDiv.wiki/35351/Retain-Drops
                      dropRetentionDays: 183
                      # dropRetentionDays: 90
                      accessToken: $(dn-bot-devdiv-drop-rw-code-rw)
                    # Only create the drop if the workload drop directory exists.
                    condition: eq(variables['UploadWorkloadDrop'], 'True')

              - ${{ each primaryInsertionBranch in parameters.primaryVsInsertionBranches }}:
                # Creates VS insertion PRs using the VS drops containing the workloads and vsman files.
                # One PR is created per branch defined at the top of this file in the primaryVsInsertionBranches parameter.
                # Documentation: https://devdiv.visualstudio.com/DevDiv/_wiki/wikis/DevDiv.wiki/635/Overview?anchor=**build-pipeline**
                # YAML reference: https://dev.azure.com/devdiv/Engineering/_git/MicroBuild?path=/src/Tasks/InsertVsPayload/task.json
                - task: MicroBuildInsertVsPayload@5
                  displayName: 'Create VS insertion: ${{ primaryInsertionBranch }}'
                  inputs:
                    # InsertionAccessToken: $(dn-bot-all-drop-rw-code-rw-release-all)
                    # ConnectedServiceName: DotNetRelease-PME
                    InsertionAccessToken: $(dn-bot-devdiv-build-rw-code-rw-release-rw)
                    TargetBranch: ${{ primaryInsertionBranch }}
                    # Cannot use '.NET' at the start. The branch name (one used for VS insertion) is created via this value. It produces an error, for example:
                    # fatal: 'team/.NET-Project-System/DotNet-Project-System-20220818.3-1' is not a valid branch name
                    TeamName: DotNet SDK
                    TeamEmail: dotnetdevexcli@microsoft.com
                    InsertionPayloadName: 'DotNet-SDK-Workloads ($(Build.SourceBranchName):$(Build.BuildNumber))'
                    # PrimaryVSComponentJsonValues variable is set during create-workload-drops.ps1 in Microsoft.NET.Workloads.Vsman.csproj.
                    ComponentJsonValues: $(PrimaryVSComponentJsonValues)
                    AllowTopicBranchUpdate: true
                    # This is the name of our DevDiv alias.
                    InsertionReviewers: Dotnet Core SDK and CLI
                    InsertionBuildPolicies: Request Perf DDRITs
                    # This action only works on AzDO repos. This warning occurs if enabled:
                    # ##[warning]WARNING: Cannot extract commit details from vstfs:///Build/Build/6574299: ArgumentException : 'https://github.com/dotnet/project-system' does not look like an Azure DevOps url
                    # Documentation: https://devdiv.visualstudio.com/DevDiv/_wiki/wikis/DevDiv.wiki/631/Copy-Commit-Details-to-PR
                    AddCommitsToPR: false
                    # This action only works on AzDO repos. This warning occurs if enabled:
                    # ##[warning]WARNING: Cannot copy work items from vstfs:///Build/Build/6574299: ArgumentException : 'https://github.com/dotnet/project-system' does not look like an Azure DevOps url
                    # Documentation: https://devdiv.visualstudio.com/DevDiv/_wiki/wikis/DevDiv.wiki/634/Link-Work-Items-to-PR
                    LinkWorkItemsToPR: false
                    # Documentation: https://devdiv.visualstudio.com/DevDiv/_wiki/wikis/DevDiv.wiki/638/Set-AutoComplete-on-an-Insertion
                    InsertAutoComplete: true
              - ${{ each secondaryInsertionBranch in parameters.secondaryVsInsertionBranches }}:
                # Creates VS insertion PRs using the VS drops containing the workloads and vsman files.
                # One PR is created per branch defined at the top of this file in the secondaryVsInsertionBranches parameter.
                # Documentation: https://devdiv.visualstudio.com/DevDiv/_wiki/wikis/DevDiv.wiki/635/Overview?anchor=**build-pipeline**
                # YAML reference: https://dev.azure.com/devdiv/Engineering/_git/MicroBuild?path=/src/Tasks/InsertVsPayload/task.json
                - task: MicroBuildInsertVsPayload@5
                  displayName: 'Create VS insertion: ${{ secondaryInsertionBranch }}'
                  inputs:
                    InsertionAccessToken: $(dn-bot-devdiv-drop-rw-code-rw)
                    TargetBranch: ${{ secondaryInsertionBranch }}
                    # Cannot use '.NET' at the start. The branch name (one used for VS insertion) is created via this value. It produces an error, for example:
                    # fatal: 'team/.NET-Project-System/DotNet-Project-System-20220818.3-1' is not a valid branch name
                    TeamName: DotNet SDK
                    TeamEmail: dotnetdevexcli@microsoft.com
                    InsertionPayloadName: 'DotNet-SDK-Workloads ($(Build.SourceBranchName):$(Build.BuildNumber))'
                    # SecondaryVSComponentJsonValues variable is set during create-workload-drops.ps1 in Microsoft.NET.Workloads.Vsman.csproj.
                    ComponentJsonValues: $(SecondaryVSComponentJsonValues)
                    AllowTopicBranchUpdate: true
                    # This is the name of our DevDiv alias.
                    InsertionReviewers: Dotnet Core SDK and CLI
                    InsertionBuildPolicies: Request Perf DDRITs
                    # This action only works on AzDO repos. This warning occurs if enabled:
                    # ##[warning]WARNING: Cannot extract commit details from vstfs:///Build/Build/6574299: ArgumentException : 'https://github.com/dotnet/project-system' does not look like an Azure DevOps url
                    # Documentation: https://devdiv.visualstudio.com/DevDiv/_wiki/wikis/DevDiv.wiki/631/Copy-Commit-Details-to-PR
                    AddCommitsToPR: false
                    # This action only works on AzDO repos. This warning occurs if enabled:
                    # ##[warning]WARNING: Cannot copy work items from vstfs:///Build/Build/6574299: ArgumentException : 'https://github.com/dotnet/project-system' does not look like an Azure DevOps url
                    # Documentation: https://devdiv.visualstudio.com/DevDiv/_wiki/wikis/DevDiv.wiki/634/Link-Work-Items-to-PR
                    LinkWorkItemsToPR: false
                    # Documentation: https://devdiv.visualstudio.com/DevDiv/_wiki/wikis/DevDiv.wiki/638/Set-AutoComplete-on-an-Insertion
                    InsertAutoComplete: true
            - task: 1ES.PublishBuildArtifacts@1
              displayName: Publish Workload Drops to Pipeline
              inputs:
                PathtoPublish: $(Build.SourcesDirectory)/artifacts/workloads/drops
                ArtifactName: WorkloadDrops
                publishLocation: Container
              continueOnError: true
              condition: always()